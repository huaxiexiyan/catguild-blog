<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>猫公会</title>
    <link>https://www.catguild.cn/</link>
    <description>Recent content on 猫公会</description>
    <image>
      <title>猫公会</title>
      <url>https://www.catguild.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.catguild.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 01 May 2023 00:30:03 +0000</lastBuildDate><atom:link href="https://www.catguild.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>我是文章标题</title>
      <link>https://www.catguild.cn/posts/hugo%E6%96%87%E7%AB%A0%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 01 May 2023 00:30:03 +0000</pubDate>
      
      <guid>https://www.catguild.cn/posts/hugo%E6%96%87%E7%AB%A0%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95/</guid>
      <description>描述性文字</description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.catguild.cn/category/redis/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/category/redis/readme/</guid>
      <description> </description>
    </item>
    
    <item>
      <title></title>
      <link>https://www.catguild.cn/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1durid%E6%95%B0%E6%8D%AE%E6%BA%90%E5%AF%BC%E8%87%B4%E7%9A%84%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/posts/%E8%AE%B0%E4%B8%80%E6%AC%A1durid%E6%95%B0%E6%8D%AE%E6%BA%90%E5%AF%BC%E8%87%B4%E7%9A%84%E7%94%9F%E4%BA%A7%E4%BA%8B%E6%95%85/</guid>
      <description>记一次生产事故 事故情景 表现 解决 原因 复盘</description>
    </item>
    
    <item>
      <title>gRPC</title>
      <link>https://www.catguild.cn/posts/gprc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/posts/gprc/</guid>
      <description>protobuf语法 文件格式 .proto 版本设定 # 可选proto2 ，主流一般都是用 proto3 syntax = &amp;#34;proto3&amp;#34;; 注释 单行 # 多行 /* */ 与java语言相关的语法 # 后续 protobuf 生成的java代码，是在同一源文件，还是多个源文件中 option java_multiple_files = true; # 指定 protobuf 生成的类 放在什么包下面 option java_package = &amp;#34;com.xx.xx&amp;#34;; # 指定 protobuf 生成</description>
    </item>
    
    <item>
      <title>markdown语法效果测试</title>
      <link>https://www.catguild.cn/posts/markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/posts/markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/</guid>
      <description>这里是这篇文章的源文件： 测试各种样式的帖子哦 上面是分割线，看到了么？ 段内格式测试： 这里首先是紧接着的一段而不分行。然后是粗体和斜体，粗斜体，以及删除线和段内代码，最后就是注脚1。 下划线生成标题： 下划线标题1 下划线标题2 #Sharp标题1 ##</description>
    </item>
    
    <item>
      <title>Python基本使用</title>
      <link>https://www.catguild.cn/category/practical/python/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/category/practical/python/%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid>
      <description>基本安装 1、到官网下载最新的版本 虚拟环境 1、安装 pip install pipenv 2、（选用）修改环境变量 该环境会让虚拟环境创建再当前项目下，否则会创建默认位置 PIPENV_VENV_IN_PROJECT=1 3、到项目目录下 pipenv install 该命令会创建虚拟环境目录，并生成 Pipfile 和Pipfile.lock 文件 4、安装依赖 pipenv install package_name 5、</description>
    </item>
    
    <item>
      <title>Redis分布式锁</title>
      <link>https://www.catguild.cn/category/redis/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/category/redis/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>为什么需要分布式锁 单机场景下用的都是本地锁，针对的仅仅是一个jvm进程所管理的资源。当单体应用部署了多份的时候，一个jvm进程中本地锁是无法影响到另一个jvm进程的本地锁的，这样是无法保证资源的独占的。所以分布式锁应运而生。 一个靠谱的分布式</description>
    </item>
    
    <item>
      <title>Redis基础数据类型</title>
      <link>https://www.catguild.cn/category/redis/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/category/redis/redis%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>页面内容2</description>
    </item>
    
    <item>
      <title>Redis面试题</title>
      <link>https://www.catguild.cn/category/redis/redis%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/category/redis/redis%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>1、Redis除了拿来做缓存</description>
    </item>
    
    <item>
      <title>Spring Task定时任务</title>
      <link>https://www.catguild.cn/posts/spring%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/posts/spring%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</guid>
      <description>初认识 基本使用 1、添加基本依赖 2、 @EnableScheduling 注解开启定时任务 @Scheduled 注释标注定时任务方法 通过注册ScheduledAnnotationBeanPostProcessor来执行@Scheduled注释的处理。这可以手动完成，或者更方便地通过task:ann</description>
    </item>
    
    <item>
      <title>SpringBoot初始化方法</title>
      <link>https://www.catguild.cn/posts/springboot%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/posts/springboot%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E6%B3%95/</guid>
      <description>总览 方式 优点 缺点 @PostConstruct 注解 1、简单直观，只需要在方法上添加注解即可。2、集成度高，与Spring框架紧密结合，适用于需要与其他Spring功能一起使用的场景。 1、不太适合复杂的初始化逻辑，因为它没有提供很多的错误处理机制。2、无法捕获方法内部的</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://www.catguild.cn/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>内容分发网络CND</title>
      <link>https://www.catguild.cn/posts/%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9Ccnd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/posts/%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9Ccnd/</guid>
      <description>CDN 含义 内容分发网络（英语：Content Delivery Network或Content Distribution Network，缩写：CDN）是指一种透过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来</description>
    </item>
    
    <item>
      <title>友链</title>
      <link>https://www.catguild.cn/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/links/</guid>
      <description>SoulChild随笔记 SoulChild随笔记</description>
    </item>
    
    
    
    <item>
      <title>爬虫</title>
      <link>https://www.catguild.cn/category/practical/python/%E7%88%AC%E8%99%AB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/category/practical/python/%E7%88%AC%E8%99%AB/</guid>
      <description>爬虫框架 scrapy 1、创建新项目 scrapy startproject tutorial 2、创建爬虫文件 # 创建普通模版 scrapy genspider 爬虫名字 爬取的域名（不用协议头） # 创建 crawl spider 模版 scrapy genspider -t crawl 爬虫名字 爬取的域名（不用协议头） 3、启动爬虫 scrapy crawl 爬虫名字 项目文件结构 项目名字 项目名字 spiders文件夹（存储的是爬虫文件</description>
    </item>
    
    <item>
      <title>线程中断</title>
      <link>https://www.catguild.cn/category/juc/%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/category/juc/%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD/</guid>
      <description>线程中断机制 LockSupport类 简介：用于创建锁和其他同步类的基本线程阻塞原语 该类与使用它的每个线程关联一个许可证（在Semaphore类的意义上）。如果许可证可用，将立即返回park，并在此过程中消费；否则可能会阻止。如果尚未提供许可</description>
    </item>
    
    <item>
      <title>邀请码实现方案</title>
      <link>https://www.catguild.cn/posts/%E9%82%80%E8%AF%B7%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/posts/%E9%82%80%E8%AF%B7%E7%A0%81%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</guid>
      <description>算法实现 参考 浅谈邀请码的生成</description>
    </item>
    
    <item>
      <title>雪花算法</title>
      <link>https://www.catguild.cn/posts/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.catguild.cn/posts/%E9%9B%AA%E8%8A%B1%E7%AE%97%E6%B3%95/</guid>
      <description>snowflake 分布式id生成算法的有很多种，Twitter的雪花算法（SnowFlake）就是其中经典的一种。 SnowFlake算法的优点： 生成ID时不依赖于数据库，完全在内存生成，高性能高可用。 容量大，每秒可生成几百万ID。 SnowFlake算法在同</description>
    </item>
    
  </channel>
</rss>
